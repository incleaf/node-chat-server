#!/usr/bin/env node
const cluster = require('cluster');
const os = require('os');

const app = require('../app');
const debug = require('debug')('node-chat-server:server');
const http = require('http');
const socket = require('../socket');

if (cluster.isMaster && !module.parent) {
  const forkWorker = () => {
    let worker = cluster.fork();
    worker.on("message", (message) => {

    });
  };

  // Fork Child process
  const numCPUs = os.cpus().length;
  for (let i = 0; i < numCPUs; i++) {
    forkWorker();
  }

  cluster.on("exit", (worker) => {
    console.log("Worker %d died - Respawn process", worker.id);
    forkWorker();
  });
} else {
  const port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);


  const server = http.createServer(app);
  const io = require('socket.io')(server);
  io.on('connection', socket);


  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}
