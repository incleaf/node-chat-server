#!/usr/bin/env node
const cluster = require('cluster');
const os = require('os');
const net = require('net');
const sio = require('socket.io');
const sioRedis = require('socket.io-redis');
const app = require('../app');
const debug = require('debug')('node-chat-server:server');
const http = require('http');
const socket = require('../socket');

const port = normalizePort(process.env.PORT || '3000');

if (cluster.isMaster && !module.parent) {
  const workers = [];
  const spawn = (i) => {
    workers[i] = cluster.fork();
    workers[i].on('message', (message) => {
      console.lo(worker.id, 'turned on');
    });
    workers[i].on('exit', (worker) => {
      console.log('Worker %d died - Respawn process', worker.id);
      spawn(i);
    });
  };

  // Fork Child process
  const numCPUs = os.cpus().length;
  for (let i = 0; i < numCPUs; i++) {
    spawn(i);
  }

  const getWorkerIndex = function(ip, len) {
    let s = '';
    for (let i = 0, _len = ip.length; i < _len; i++) {
      if (!isNaN(ip[i])) {
        s += ip[i];
      }
    }

    return Number(s) % len;
  };

  // Create the outside facing server listening on our port.
  const server = net.createServer({ pauseOnConnect: true }, function(connection) {
    const worker = workers[getWorkerIndex(connection.remoteAddress, numCPUs)];
    worker.send('sticky-session:connection', connection);
  }).listen(port);

} else {
  console.log('hihi')
  app.set('port', port);


  const server = http.createServer(app);
  const io = sio(server);
  io.adapter(sioRedis({ host: 'localhost', port: 6379 }));
  io.on('connection', socket);

  server.listen(0, 'localhost');
  server.on('error', onError);
  server.on('listening', onListening);


  process.on('message', function(message, connection) {
    console.log('I am process', process.pid);

    if (message !== 'sticky-session:connection') {
      return;
    }

    console.log('asdffadsfads', process.pid);

    // Emulate a connection event on the server by emitting the
    // event with the connection the master sent us.
    server.emit('connection', connection);

    connection.resume();
  });

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
